// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/quizapp/internal/cli/command (interfaces: QuizClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/quizapp/pkg/dto"
)

// MockQuizClient is a mock of QuizClient interface.
type MockQuizClient struct {
	ctrl     *gomock.Controller
	recorder *MockQuizClientMockRecorder
}

// MockQuizClientMockRecorder is the mock recorder for MockQuizClient.
type MockQuizClientMockRecorder struct {
	mock *MockQuizClient
}

// NewMockQuizClient creates a new mock instance.
func NewMockQuizClient(ctrl *gomock.Controller) *MockQuizClient {
	mock := &MockQuizClient{ctrl: ctrl}
	mock.recorder = &MockQuizClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuizClient) EXPECT() *MockQuizClientMockRecorder {
	return m.recorder
}

// GetAllQuestions mocks base method.
func (m *MockQuizClient) GetAllQuestions(arg0 context.Context) ([]dto.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQuestions", arg0)
	ret0, _ := ret[0].([]dto.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQuestions indicates an expected call of GetAllQuestions.
func (mr *MockQuizClientMockRecorder) GetAllQuestions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQuestions", reflect.TypeOf((*MockQuizClient)(nil).GetAllQuestions), arg0)
}

// SendAnswers mocks base method.
func (m *MockQuizClient) SendAnswers(arg0 context.Context, arg1 []dto.Answer) (dto.QuizResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAnswers", arg0, arg1)
	ret0, _ := ret[0].(dto.QuizResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAnswers indicates an expected call of SendAnswers.
func (mr *MockQuizClientMockRecorder) SendAnswers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAnswers", reflect.TypeOf((*MockQuizClient)(nil).SendAnswers), arg0, arg1)
}
